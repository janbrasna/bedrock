name: Mock env test

on:
  push:
    branches:
      - mock
      - main
      - stage
      - run-integration-tests
    tags:
      - '*'

  workflow_dispatch:
    inputs:
      ref:
        description: 'ref to be deployed (e.g. "refs/heads/main", "v1.0.0", "2c0472cf")'
        type: string
        required: true
        default: refs/heads/main
env:
  APP: bedrock
  ORG: mozmeao
  IMAGE: bedrock
  GAR_LOCATION: us
  GCP_PROJECT_ID: moz-fx-bedrock-prod
  GAR_REPOSITORY: bedrock-prod
  REF_ID: ${{ github.event.inputs.ref || github.ref }}


jobs:
  build_and_publish_public_images:
    name: Build images and set environments
    runs-on: ubuntu-latest
    outputs:
      long_sha: ${{ env.LONG_SHA }}
      deployment_env: ${{ env.DEPLOYMENT_ENV }}
      deployment_realm: ${{ env.DEPLOYMENT_REALM }}
      image_tag: ${{ env.TAG }}

    steps:
      #- uses: docker/setup-buildx-action@v3
      #  with:
      #    buildkitd-flags: "cache-from: type=gha cache-to: type=gha,mode=max"

      - uses: actions/checkout@v4
        with:
            fetch-depth: 10 # get enough so we have a Git history, but not everything
            fetch-tags: true
            ref: ${{ env.REF_ID }}

      - id: long-sha
        name: Set the SHA used for tagging images
        run: |-
          echo "LONG_SHA=$(git rev-parse HEAD)" >> $GITHUB_ENV

      - name: Set main triggered env to dev-nonprod
        if: github.ref == 'refs/heads/main'  # Updates to the main branch are deployed to dev.
        run: |
          echo TAG="dev-$LONG_SHA" >> $GITHUB_ENV
          echo DEPLOYMENT_ENV=dev >> $GITHUB_ENV
          echo DEPLOYMENT_REALM=nonprod >> $GITHUB_ENV

      - name: Set run-integration-test triggered env to test-nonprod
        if: github.ref == 'refs/heads/run-integration-tests'  # Updates to the run-integration-test branch are deployed to test.
        run: |
          echo TAG="test-$LONG_SHA" >> $GITHUB_ENV
          echo DEPLOYMENT_ENV=test >> $GITHUB_ENV
          echo DEPLOYMENT_REALM=nonprod >> $GITHUB_ENV

      - name: Set mock triggered env to stage-nonprod
        if: github.ref == 'refs/heads/mock'  # Updates to the stage branch are deployed to stage.
        run: |
            echo TAG="stage-$LONG_SHA" >> $GITHUB_ENV
            echo DEPLOYMENT_ENV=stage >> $GITHUB_ENV
            echo DEPLOYMENT_REALM=nonprod >> $GITHUB_ENV

      - name: Set tag triggered env to prod-prod
        if: startsWith(github.ref, 'refs/tags/')  # Version tags are deployed to prod.
        run: |
          echo TAG="prod-$LONG_SHA" >> $GITHUB_ENV
          echo DEPLOYMENT_ENV=prod >> $GITHUB_ENV
          echo DEPLOYMENT_REALM=prod >> $GITHUB_ENV

      #- uses: docker/login-action@v3
      #  with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push public images to Docker Hub
        run: |
            export DEBUG_LONG_SHA=${{ env.LONG_SHA }}
        env:
            GIT_COMMIT: ${{ env.LONG_SHA }}


  upload_static_assets:
    name: Upload static assets to GCS
    runs-on: ubuntu-latest
    environment: build
    needs: build_and_publish_public_images
    #permissions:
    #  contents: read
    #  id-token: write

    steps:
      #- uses: google-github-actions/auth@v2
      #  with:
      #    token_format: access_token
      #    service_account: artifact-writer@${{ env.GCP_PROJECT_ID }}.iam.gserviceaccount.com
      #    workload_identity_provider: ${{ vars.GCPV2_GITHUB_WORKLOAD_IDENTITY_PROVIDER }}

      #- uses: google-github-actions/setup-gcloud@v2
      #  with:
      #    version: 413.0.0

      - name: Generate hashes and rsync to gs://
        run: |-
            export ASSETS_TMP=${{ env.ORG }}/${{ env.IMAGE }}:${{ needs.build_and_publish_public_images.outputs.long_sha }}
            export GS_URI=${{ env.APP }}-${{ needs.build_and_publish_public_images.outputs.deployment_realm }}-${{ needs.build_and_publish_public_images.outputs.deployment_env }}-media/media/


  push_image_to_gar:
    name: Deploy by publishing to GAR
    needs: [build_and_publish_public_images, upload_static_assets]
    runs-on: ubuntu-latest
    #permissions:
    #  contents: read
    #  id-token: write

    steps:
      #- uses: docker/setup-buildx-action@v3

      #- uses: google-github-actions/auth@v2
      #  id: gcp_auth
      #  with:
      #      token_format: access_token
      #      service_account: artifact-writer@${{ env.GCP_PROJECT_ID }}.iam.gserviceaccount.com
      #      workload_identity_provider: ${{ vars.GCPV2_GITHUB_WORKLOAD_IDENTITY_PROVIDER }}

      #- uses: docker/login-action@v3
      #  with:
      #     registry: ${{ env.GAR_LOCATION }}-docker.pkg.dev
      #     username: oauth2accesstoken
      #     password: ${{ steps.gcp_auth.outputs.access_token }}

      - name: Tag the image and push to GAR
        run: |-
             export DOCKER_PULL=${{ env.ORG }}/${{ env.IMAGE }}:${{ needs.build_and_publish_public_images.outputs.long_sha }}
             export DOCKER_TAG=${{ env.ORG }}/${{ env.IMAGE }}:${{ needs.build_and_publish_public_images.outputs.long_sha }}+${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GAR_REPOSITORY}}/${{ env.IMAGE }}:${{ needs.build_and_publish_public_images.outputs.image_tag }}
             export DOCKER_PUSH=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GAR_REPOSITORY}}/${{ env.IMAGE }}:${{ needs.build_and_publish_public_images.outputs.image_tag }}
